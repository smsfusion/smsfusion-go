/* 
 * SMS Fusion API
 *
 * This is the SMS Fusion API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@smsfusion.com.au
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package swagger

import (
	"net/url"
	"strings"
	"encoding/json"
)

type SMSApi struct {
	Configuration *Configuration
}

func NewSMSApi() *SMSApi {
	configuration := NewConfiguration()
	return &SMSApi{
		Configuration: configuration,
	}
}

func NewSMSApiWithBasePath(basePath string) *SMSApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &SMSApi{
		Configuration: configuration,
	}
}

/**
 * Send an SMS
 * Send one or more SMS
 *
 * @param key API Key as generated from the &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/admin/api/&#39;&gt;admin panel&lt;/a&gt;
 * @param num Comma separated list of phone numbers or &lt;a href&#x3D;&#39;https://www.smsfusion.com.au/help/msisdn/&#39;&gt;MSDISDN&lt;/a&gt;&#39;s
 * @param msg Message content to send
 * @param from MSISDN or vanity alphanumeric source number
 * @param deliverby UTC encoded time to send the SMS
 * @param dlrcb HTTP or HTTPS callback URL for delivery reports. Timeout for callbacks is set to 30 seconds
 * @param replycb HTTP or HTTPS callback URL for replies. Timeout for callbacks is set to 30 seconds
 * @param replyemail Email address to send replies to
 * @param validity Time in minutes to keep the SMS valid for
 * @param cc 2 character country code &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-2&#39;&gt;ISO 3166-2&lt;/a&gt; for formatting local numbers internationally
 * @return *SmsResult
 */
func (a SMSApi) SendSMS(key string, num []string, msg string, from string, deliverby string, dlrcb string, replycb string, replyemail string, validity int32, cc string) (*SmsResult, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Get")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/sms/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(api_key)' required
	// set key with prefix in query string
	localVarQueryParams["key"] =  a.Configuration.GetAPIKeyWithPrefix("key")
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}
	localVarQueryParams.Add("key", a.Configuration.APIClient.ParameterToString(key, ""))
	var numCollectionFormat = "csv"
	localVarQueryParams.Add("num", a.Configuration.APIClient.ParameterToString(num, numCollectionFormat))

	localVarQueryParams.Add("msg", a.Configuration.APIClient.ParameterToString(msg, ""))
	localVarQueryParams.Add("from", a.Configuration.APIClient.ParameterToString(from, ""))
	localVarQueryParams.Add("deliverby", a.Configuration.APIClient.ParameterToString(deliverby, ""))
	localVarQueryParams.Add("dlrcb", a.Configuration.APIClient.ParameterToString(dlrcb, ""))
	localVarQueryParams.Add("replycb", a.Configuration.APIClient.ParameterToString(replycb, ""))
	localVarQueryParams.Add("replyemail", a.Configuration.APIClient.ParameterToString(replyemail, ""))
	localVarQueryParams.Add("validity", a.Configuration.APIClient.ParameterToString(validity, ""))
	localVarQueryParams.Add("cc", a.Configuration.APIClient.ParameterToString(cc, ""))

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
		}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(SmsResult)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()
	var localVarAPIResponse = &APIResponse{Operation: "SendSMS", Method: localVarHttpMethod, RequestURL: localVarURL.String()}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}

